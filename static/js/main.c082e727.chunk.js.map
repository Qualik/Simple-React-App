{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","Event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"0NAGMA,EAAc,WAChB,OACI,+BACI,4BACI,oCACA,mCACA,yCAMVC,EAAY,SAACC,GACf,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACvC,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACI,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAOhB,OAAO,+BAAQJ,IAeJU,EAZD,SAACX,GAAW,IACfE,EAAkCF,EAAlCE,cAAeQ,EAAmBV,EAAnBU,gBAElB,OACA,+BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,cAAeA,EAAeQ,gBACxCA,M,OCYEE,E,4MA/CXC,aAAe,CACXN,KAAM,GACNC,IAAK,I,EAGTM,MAAQ,EAAKD,a,EAGbE,aAAe,SAACC,GAAW,IAAD,EACEA,EAAMC,OAAtBV,EADc,EACdA,KAAMW,EADQ,EACRA,MAEd,EAAKC,SAAL,eACKZ,EAAOW,K,EA4BhBE,WAAa,WACT,EAAKpB,MAAMqB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,uDA1Bb,IAAD,EACiBS,KAAKR,MAAnBP,EADH,EACGA,KAAMC,EADT,EACSA,IAEd,OACI,8BACI,2BAAOe,QAAQ,QAAf,QACA,2BACIC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eACnB,2BAAOQ,QAAQ,OAAf,OACA,2BACIC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eACf,2BAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,kB,GApCnDO,aC8CJC,E,4MA1CXd,MAAQ,CACJe,WAAY,I,EAIpBnB,gBAAkB,SAACL,GAAW,IAClBwB,EAAe,EAAKf,MAApBe,WAER,EAAKV,SAAS,CACVU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACtC,OAAOA,IAAM3B,Q,EAKzBgB,aAAe,SAACU,GACZ,EAAKZ,SAAS,CAAEU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,uDAIjD,IACEF,EAAeP,KAAKR,MAApBe,WAER,OACI,yBAAKI,UAAU,aACX,kFACA,kBAAC,EAAD,CAAO/B,cAAe2B,EAAYnB,gBAC7BY,KAAKZ,kBACV,kBAAC,EAAD,CAAMW,aAAeC,KAAKD,oB,GA7BpBM,a,MCClBO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.c082e727.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nconst TableHeader = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Job</th>\n                <th>Remove</th>\n            </tr>\n        </thead>\n    );\n}\n\nconst TableBody = (props) => {\n    const rows = props.characterData.map((row, index) => {\n        return (\n            <tr key={index}>\n                <td>{row.name}</td>\n                <td>{row.job}</td>\n                <td>\n                    <button onClick={() => props.removeCharacter(index)}>Delete</button>\n                </td>\n            </tr>\n        );\n    });\n\n\n    return <tbody>{rows}</tbody>;\n}\n\nconst Table = (props) => {\n    const {characterData, removeCharacter} = props;\n\n        return (\n        <table>\n            <TableHeader />\n            <TableBody characterData={characterData} removeCharacter=\n            {removeCharacter} />\n        </table>\n        );\n    }\n\nexport default Table;\n\n//Simple Component","import React, { Component } from 'react'\n// import { render } from 'react-dom'\n\nclass Form extends Component {\n    initialState = {\n        name: '',\n        job: '',\n    }\n\n    state = this.initialState\n\n\n    handleChange = (Event) => {\n        const { name, value } = Event.target\n\n        this.setState({\n            [name]: value,\n        })\n    }\n\n    render() {\n        const { name, job } = this.state;\n\n        return (\n            <form>\n                <label htmlFor=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    id=\"name\"\n                    value={name}\n                    onChange={this.handleChange} />\n                <label htmlFor=\"job\">Job</label>\n                <input\n                    type=\"text\"\n                    name=\"job\"\n                    id=\"job\"\n                    value={job}\n                    onChange={this.handleChange} />\n                    <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n            </form>\n        );\n    }\n\n    submitForm = () => { //Simple Component \n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n\n}\n\nexport default Form;\n\n//App Component\n//Custom Class Component with Simple Component","import React, { Component } from 'react'\n// import { render } from 'react-dom'\nimport Table from './Table'\nimport Form from './Form'\n\n\nclass App extends Component {\n    state = {\n        characters: [],\n    };\n\n\nremoveCharacter = (index) => {\n    const { characters } = this.state\n\n    this.setState({\n        characters: characters.filter((character, i) => {\n            return i !== index\n        })\n    });\n}\n\nhandleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] })\n\n}\n\nrender() {\n    const { characters } = this.state\n\n    return (\n        <div className=\"container\" >\n            <p>Add a character with a name and a job to the table.</p>\n            <Table characterData={characters} removeCharacter=\n                {this.removeCharacter} />\n            <Form handleSubmit={ this.handleSubmit }  />\n        </div>\n    )\n    }\n\n    \n\n\n}\n\n\n\n\n\nexport default App;\n\n//App Component\n//Custom Class Component","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}